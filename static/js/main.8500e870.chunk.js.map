{"version":3,"sources":["components/InvertedButton.js","utils/format.js","components/ActiveTimer.js","context/AppReducer.js","firebase/config.js","context/GlobalState.js","data/constants.js","components/TimeCards.js","components/Timers.js","components/AccountButton.js","components/ProjectsDialog.js","components/TimeButton.js","components/TopAppBar.js","components/SignIn.js","App.js","reportWebVitals.js","index.js"],"names":["InvertedButton","children","sx","props","Button","backgroundColor","color","formatDigits","n","Math","floor","ActiveTimer","offsetTimestamp","useStopwatch","autoStart","seconds","minutes","hours","days","Typography","variant","format","AppReducer","state","action","type","activeTimers","createdAt","payload","projectId","user","projects","timers","filter","timer","toMillis","id","project","app","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getFirestore","signInWithGoogle","a","provider","GoogleAuthProvider","signInWithPopup","signOut","error","initialState","currentUser","GlobalContext","createContext","GlobalProvider","useReducer","dispatch","useEffect","onAuthStateChanged","getDocs","collection","uid","projectsSnapshot","query","orderBy","timersSnapshot","docs","reduce","doc","data","map","createProject","name","colour","addDoc","docRef","updateProject","setDoc","stopTimer","endedAt","Timestamp","now","Provider","value","createTimer","COLOURS","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","lightGreen","lime","yellow","amber","orange","deepOrange","TimeCards","useContext","endTimer","event","find","currentTarget","dataset","created","Box","display","flex","padding","overflow","scrollbarWidth","height","borderRadius","minHeight","createdAtMS","Card","margin","width","CardContent","CardActions","onClick","startIcon","Stop","length","Divider","Timers","datedTimers","accumulator","date","toDate","toLocaleDateString","undefined","weekday","year","month","day","Object","keys","marginX","elevation","CardActionArea","Toolbar","Chip","label","ms","marginY","textAlign","AccountButton","useState","anchorEl","setAnchorEl","open","Boolean","IconButton","Avatar","src","photoURL","Menu","onClose","MenuItem","ListItemIcon","Logout","ProjectsDialog","handleClose","dialogState","setDialogState","formInput","setFormInput","DialogTitle","List","pt","ListItem","disableGutters","ListItemButton","Add","ListItemText","entries","Circle","DialogContent","gap","Select","defaultValue","displayEmpty","onChange","target","renderValue","required","colourKey","hex","TextField","placeholder","transform","DialogActions","TimeButton","dialogOpen","setDialogOpen","handleDialogClose","startTimer","Settings","Dialog","TopAppBar","AppBar","position","noWrap","component","flexGrow","xs","sm","marginLeft","marginRight","SignIn","alignItems","flexDirection","justifyContent","Google","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAEO,SAASA,EAAT,GAAqD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,GAAOC,EAAS,iBACzD,OACE,cAACC,EAAA,EAAD,yBACEF,GAAE,2BACGA,GADH,IAEAG,gBAAiB,OACjBC,MAAO,UACP,UAAW,CACTD,gBAAiB,OACjBC,MAAO,cAGPH,GAVN,aAYGF,K,0DCZMM,EAAe,SAACC,GAAD,OAC1BA,EAAI,GAAJ,WAAaC,KAAKC,MAAMF,IAAxB,UAAkCC,KAAKC,MAAMF,KCDxC,SAASG,EAAT,GAA2C,IAApBC,EAAmB,EAAnBA,gBAC5B,EAA0CC,uBAAa,CACrDC,WAAW,EACXF,oBAFMG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,KAKjC,OACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGC,EAAOJ,EAAe,GAAPC,GADlB,IAC+BG,EAAOL,GADtC,IACiDK,EAAON,M,0DCZrD,SAASO,EAAWC,EAAOC,GAAS,IAAD,IACxC,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BACFF,GADL,IAEEG,aAAa,CACX,CACEC,UAAWH,EAAOI,QAAQD,UAC1BE,UAAWL,EAAOI,QAAQC,YAHlB,mBAKPN,EAAMG,iBAGf,IAAK,YACH,OAAO,2BACFH,GADL,IAEEO,KAAMN,EAAOI,QAAQE,KACrBC,SAAQ,UAAEP,EAAOI,QAAQG,gBAAjB,QAA6B,GACrCC,OAAM,UAAER,EAAOI,QAAQI,cAAjB,QAA2B,KAErC,IAAK,aACH,OAAO,2BACFT,GADL,IAEEG,aAAcH,EAAMG,aAAaO,QAC/B,SAACC,GAAD,OACEA,EAAMP,UAAUQ,aAAeX,EAAOI,QAAQD,UAAUQ,cAE5DH,OAAO,CAAER,EAAOI,SAAV,mBAAsBL,EAAMS,WAEtC,IAAK,cACH,OAAO,2BACFT,GADL,IAEEQ,SAAS,2BACJR,EAAMQ,UADH,kBAELP,EAAOI,QAAQQ,GAAKZ,EAAOI,QAAQS,YAG1C,QACE,OAAOd,G,qBCxBPe,EAAMC,YAVW,CACrBC,OAAQ,0CACRC,WAAY,kCACZZ,UAAW,kBACXa,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIJC,EAAOC,YAAQT,GACfU,EAAKC,YAAaX,GAExB,SAAeY,IAAtB,+B,4CAAO,4BAAAC,EAAA,sEAEGC,EAAW,IAAIC,IAFlB,SAGGC,YAAgBR,EAAMM,GAHzB,+G,sBAOA,SAASG,IACd,IACET,EAAKS,UACL,MAAOC,KCdX,IAAMC,EAAe,CACnB/B,aAAc,GACdI,KAAMgB,EAAKY,YACX3B,SAAU,GACVC,OAAQ,IAGG2B,EAAgBC,wBAAcH,GAEpC,SAASI,EAAT,GAAuC,IAAb5D,EAAY,EAAZA,SAC/B,EAA0B6D,qBAAWxC,EAAYmC,GAAjD,mBAAOlC,EAAP,KAAcwC,EAAd,KAGAC,qBAAU,WACRlB,EAAKmB,mBAAL,+BAAAd,EAAA,MAAwB,WAAOrB,GAAP,qBAAAqB,EAAA,kEAGP,OAATrB,EAHgB,uBAIlBiC,EAAS,CACPtC,KAAM,YACNG,QAAS,CAAEE,UANK,0CAWWoC,YAC7BC,YAAWnB,EAAI,QAASlB,EAAKsC,IAAK,aAZhB,cAWdC,EAXc,gBAcSH,YAC3BI,YACEH,YAAWnB,EAAI,QAASlB,EAAKsC,IAAK,UAClCG,YAAQ,YAAa,UAjBL,OAcdC,EAdc,OAoBdzC,EAAWsC,EAAiBI,KAAKC,QAAO,SAAC3C,EAAU4C,GACvD,OAAO,2BACF5C,GADL,kBAEG4C,EAAIvC,GAAKuC,EAAIC,WAEf,IACG5C,EAASwC,EAAeC,KAAKI,KAAI,SAACF,GACtC,OAAO,2BACFA,EAAIC,QADT,IAEExC,GAAIuC,EAAIvC,QAGZ2B,EAAS,CACPtC,KAAM,YACNG,QAAS,CACPE,OACAC,WACAC,YArCgB,4GAAxB,yDA0CC,IAKH,IAAM8C,EAAa,uCAAG,qCAAA3B,EAAA,6DAAS4B,EAAT,EAASA,KAAMC,EAAf,EAAeA,OAAQZ,EAAvB,EAAuBA,IAAvB,SAEZ/B,EAAU,CACd0C,OACAC,UAJgB,SAOGC,YACnBd,YAAWnB,EAAI,QAASoB,EAAK,YAC7B/B,GATgB,OAOZ6C,EAPY,OAYlBnB,EAAS,CACPtC,KAAM,cACNG,QAAS,CACPQ,GAAI8C,EAAO9C,GACXC,aAhBc,yGAAH,sDAyBb8C,EAAa,uCAAG,qCAAAhC,EAAA,6DAASf,EAAT,EAASA,GAAI2C,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,OAAQZ,EAA3B,EAA2BA,IAA3B,SAEZ/B,EAAU,CACd0C,OACAC,UAJgB,SAOZI,YAAOT,YAAI3B,EAAI,QAASoB,EAAK,WAAYhC,GAAKC,GAPlC,OASlB0B,EAAS,CACPtC,KAAM,cACNG,QAAS,CACPQ,KACAC,aAbc,yGAAH,sDAoCbgD,EAAS,uCAAG,qCAAAlC,EAAA,6DAASxB,EAAT,EAASA,UAAWE,EAApB,EAAoBA,UAAWuC,EAA/B,EAA+BA,IAA/B,SAERlC,EAAQ,CACZP,YACA2D,QAASC,IAAUC,MACnB3D,aALY,SAOOoD,YACnBd,YAAWnB,EAAI,QAASoB,EAAK,UAC7BlC,GATY,OAORgD,EAPQ,OAYdnB,EAAS,CACPtC,KAAM,aACNG,QAAQ,2BACHM,GADE,IAELE,GAAI8C,EAAO9C,OAhBD,yGAAH,sDAsBf,OACE,cAACuB,EAAc8B,SAAf,CACEC,MAAK,2BACAnE,GADA,IAEHuD,gBACAK,gBACAQ,YA1Cc,SAAC,GAAmB,IAAjB9D,EAAgB,EAAhBA,UACfD,EAAU,CACdD,UAAW4D,IAAUC,MACrB3D,aAEFkC,EAAS,CACPtC,KAAM,eACNG,aAoCEyD,cANJ,SASGpF,ICxKA,IAAM2F,EAAU,CACrBC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,WAAY,UACZC,OAAQ,UACRC,KAAM,UACNC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,WAAY,UACZC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,OAAQ,UACRC,WAAY,WCDP,SAASC,IACd,MAAoDC,qBAAWnD,GAAvDjC,EAAR,EAAQA,aAAcK,EAAtB,EAAsBA,SAAUD,EAAhC,EAAgCA,KAAMuD,EAAtC,EAAsCA,UAEtC,SAAS0B,EAASC,GAChB3B,EAAU,2BACL3D,EAAauF,MACd,SAAC/E,GAAD,OACEA,EAAMP,UAAUQ,cAAgB6E,EAAME,cAAcC,QAAQC,YAHzD,IAKPhD,IAAKtC,EAAKsC,OAId,OACE,qCACE,cAACiD,EAAA,EAAD,CACEnH,GAAI,CACFoH,QAAS,OACTC,KAAM,EACNC,QAAS,EACTC,SAAU,OACVC,eAAgB,OAChB,uBAAwB,CACtBC,OAAQ,QAEV,6BAA8B,CAC5BC,aAAc,OACdvH,gBAAiB,YAZvB,SAgBE,cAACgH,EAAA,EAAD,CAAKnH,GAAI,CAAEoH,QAAS,OAAQO,UAAW,eAAvC,SACGnG,EAAamD,KAAI,SAAC3C,GACjB,IAAMG,EAAUN,EAASG,EAAML,YAAc,GACvCiG,EAAc5F,EAAMP,UAAUQ,WAEpC,OACE,eAAC4F,EAAA,EAAD,CAEE7H,GAAI,CACFG,gBAAiBuF,EAAQvD,EAAQ2C,QACjCgD,OAAQ,EACRC,MAAO,KALX,UAQE,eAACC,EAAA,EAAD,WACE,cAACvH,EAAD,CAAaC,gBAAiBkH,IAC9B,cAAC3G,EAAA,EAAD,CAAYC,QAAQ,YAAYd,MAAM,iBAAtC,SACG+B,EAAQ0C,UAGb,cAACoD,EAAA,EAAD,UACE,cAAC/H,EAAA,EAAD,CACEE,MAAM,UACN,eAAcwH,EACdM,QAASrB,EACTsB,UAAW,cAACC,EAAA,EAAD,IAJb,4BAdGR,UA4BdpG,EAAa6G,OAAS,GAAK,cAACC,EAAA,EAAD,CAASpH,QAAQ,c,+BCpE5C,SAASqH,IACd,MAA6B3B,qBAAWnD,GAAhC5B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAGZ0G,EAAc1G,EAAO0C,QAAO,SAACiE,EAAazG,GAC9C,IAMM0G,EAAO1G,EAAMP,UAChBkH,SACAC,wBAAmBC,EARN,CACdC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAMP,YAA0BJ,IAAtBJ,EAAYC,GACP,2BACFD,GADL,kBAEGC,EAAO,CAAC1G,KAIN,2BACFyG,GADL,kBAEGC,EAFH,CAEW1G,GAFX,mBAEqByG,EAAYC,SAEhC,IAEH,OACE,mCACqB,IAAlB5G,EAAOuG,OACNa,OAAOC,KAAKX,GAAa7D,KAAI,SAAC+D,GAAD,OAC3B,eAACvB,EAAA,EAAD,WACE,cAAClG,EAAA,EAAD,CAAYjB,GAAI,CAAEoJ,QAAS,GAAKlI,QAAQ,WAAxC,SACGwH,IAEFF,EAAYE,GAAM/D,KAAI,SAAC3C,GAAD,OACrB,cAAC6F,EAAA,EAAD,CAAMwB,UAAW,EAAjB,SACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,OP3CEC,EO4CA1H,EAAMoD,QAAQnD,WAAaD,EAAMP,UAAUQ,WP5C5C,UAClB5B,EAAcqJ,EAAE,KAAuB,IADrB,YAC4BrJ,EAC9CqJ,EAAE,IAAkB,IAFF,YAGhBrJ,EAAcqJ,EAAK,IAAQ,MO2CZ1J,GAAI,CACFG,gBACEuF,EAAQ7D,EAASG,EAAML,WAAWmD,WAGxC,cAAC7D,EAAA,EAAD,CAAYjB,GAAI,CAAEoJ,QAAS,GAA3B,SACGvH,EAASG,EAAML,WAAWkD,aAbV7C,EAAME,IPvCtB,IAACwH,OOkCJhB,MA2BZ,eAACvB,EAAA,EAAD,CAAKnH,GAAI,CAAE2J,QAAS,EAAGrC,QAAS,EAAGsC,UAAW,UAA9C,UACE,cAAC3I,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,cAACD,EAAA,EAAD,CAAYjB,GAAI,CAAE2J,QAAS,GAA3B,2E,qEC9DH,SAASE,KACd,IAAQjI,EAASgF,qBAAWnD,GAApB7B,KAER,EAAgCkI,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQH,GASrB,OACE,qCACE,cAACI,EAAA,EAAD,CAAYjC,QATI,SAACpB,GACnBkD,EAAYlD,EAAME,gBAQhB,SACE,cAACoD,EAAA,EAAD,CAAQC,IAAKzI,EAAK0I,aAEpB,cAACC,EAAA,EAAD,CAAMR,SAAUA,EAAUE,KAAMA,EAAMO,QATtB,WAClBR,EAAY,OAQV,SACE,eAACS,EAAA,EAAD,CAAUvC,QAAS7E,EAAnB,UACE,cAACqH,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,MAFJ,mB,sICXD,SAASC,GAAT,GAA0C,IAAD,QAAfC,EAAe,EAAfA,YAC/B,EAKIjE,qBAAWnD,GAJb5B,EADF,EACEA,SACQqC,EAFV,EAEEtC,KAAQsC,IACRU,EAHF,EAGEA,cACAK,EAJF,EAIEA,cAOF,EAAsC6E,mBAAS,gBAA/C,mBAAOgB,EAAP,KAAoBC,EAApB,KACA,EAAkCjB,mBAAS,IAA3C,mBAAOkB,EAAP,KAAkBC,EAAlB,KAuBA,OACE,mCACmB,iBAAhBH,EACC,qCACE,cAACI,GAAA,EAAD,8BACA,eAACC,GAAA,EAAD,CAAMnL,GAAI,CAAEoL,GAAI,GAAhB,UACE,cAACC,GAAA,EAAD,CAAUC,gBAAc,EAAxB,SACE,eAACC,GAAA,EAAD,CAAgBrD,QAAS,kBAAM6C,EAAe,gBAA9C,UACE,cAACL,GAAA,EAAD,UACE,cAACc,GAAA,EAAD,MAEF,cAACC,GAAA,EAAD,+BAGHvC,OAAOwC,QAAQ7J,GAAU8C,KAAI,mCAAEhD,EAAF,KAAaQ,EAAb,YAC5B,cAACkJ,GAAA,EAAD,CAAUC,gBAAc,EAAxB,SACE,eAACC,GAAA,EAAD,CAAgBrD,QAAS,kBAAM6C,EAAepJ,IAA9C,UACE,cAAC+I,GAAA,EAAD,UACE,cAACiB,GAAA,EAAD,CAAQ3L,GAAI,CAAEI,MAAOsF,EAAQvD,EAAQ2C,aAEvC,cAAC2G,GAAA,EAAD,UAAetJ,EAAQ0C,WALGlD,YAYpC,qCACE,cAACuJ,GAAA,EAAD,UACGrJ,EAASiJ,GAAe,eAAiB,uBAE5C,eAACc,GAAA,EAAD,CAAe5L,GAAI,CAAEoH,QAAS,OAAQyE,IAAK,GAA3C,UACE,cAACC,GAAA,EAAD,CACEC,aAAY,oBAAElK,EAASiJ,UAAX,aAAE,EAAuBhG,cAAzB,QAAmC,GAC/CkH,cAAY,EACZC,SAAU,SAACnF,GAAD,OACRmE,EAAa,2BAAKD,GAAN,IAAiBlG,OAAQgC,EAAMoF,OAAO1G,UAEpD2G,YAAa,SAAC3G,GAAW,IAAD,EACtB,OACE,cAAC2B,EAAA,EAAD,CAAKnH,GAAI,CAAEoH,QAAS,OAAQyE,IAAK,GAAjC,SACE,cAACF,GAAA,EAAD,CAAQ3L,GAAI,CAAEI,MAAK,UAAEsF,EAAQF,UAAV,QAAoB,kBAI7C4G,UAAQ,EACRlL,QAAQ,WAdV,SAgBGgI,OAAOwC,QAAQhG,GAASf,KAAI,mCAAE0H,EAAF,KAAaC,EAAb,YAC3B,cAAC7B,EAAA,EAAD,CAA0BjF,MAAO6G,EAAjC,SACE,cAACV,GAAA,EAAD,CAAQ3L,GAAI,CAAEI,MAAOkM,MADRD,QAKnB,cAACE,GAAA,EAAD,CACER,aAAY,oBAAElK,EAASiJ,UAAX,aAAE,EAAuBjG,YAAzB,QAAiC,GAC7CoH,SAAU,SAACnF,GAAD,OACRmE,EAAa,2BAAKD,GAAN,IAAiBnG,KAAMiC,EAAMoF,OAAO1G,UAElDgH,YAAY,kBACZJ,UAAQ,EACRpM,GAAI,CACFyM,UAAW,mBAEbvL,QAAQ,gBAGZ,eAACwL,GAAA,EAAD,WACE,cAACxM,EAAA,EAAD,CAAQgI,QAAS2C,EAAjB,oBACA,cAAC3K,EAAA,EAAD,CAAQgI,QA1FC,WACjB,GAAIrG,EAASiJ,GAAc,CAAC,IAAD,IACzB7F,EAAc,CACZ/C,GAAI4I,EACJjG,KAAI,UAAEmG,EAAUnG,YAAZ,QAAoBhD,EAASiJ,GAAajG,KAC9CC,OAAM,UAAEkG,EAAUlG,cAAZ,QAAsBjD,EAASiJ,GAAahG,OAClDZ,YAEG,CACL,QAAuB2E,IAAnBmC,EAAUnG,WAA2CgE,IAArBmC,EAAUlG,OAC5C,OAEFF,EAAc,CACZC,KAAMmG,EAAUnG,KAChBC,OAAQkG,EAAUlG,OAClBZ,QAGJ2G,KAwEQ,6BCrHL,SAAS8B,GAAW1M,GACzB,MAAkC2G,qBAAWnD,GAArCgC,EAAR,EAAQA,YAAa5D,EAArB,EAAqBA,SACrB,EAAgCiI,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAO8C,EAAP,KAAmBC,EAAnB,KACM5C,EAAOC,QAAQH,GAKfc,EAAc,WAClBb,EAAY,OAQR8C,EAAoB,WACxBD,GAAc,IAGhB,SAASE,EAAWjG,GAClB+D,IACApF,EAAY,CAAE9D,UAAWmF,EAAME,cAAcC,QAAQ/E,KAGvD,OACE,qCACE,cAACpC,EAAD,yBACEoI,QAxBc,SAACpB,GACnBkD,EAAYlD,EAAME,gBAwBdmB,UAAW,cAACqD,GAAA,EAAD,IACXtK,QAAQ,aACJjB,GAJN,4BAQA,eAACsK,EAAA,EAAD,CAAMR,SAAUA,EAAUE,KAAMA,EAAMO,QAASK,EAA/C,UACE,eAACJ,EAAA,EAAD,CAAUvC,QAzBS,WACvB2C,IACAgC,GAAc,IAuBV,UACE,cAACnC,GAAA,EAAD,UACE,cAACsC,GAAA,EAAD,MAFJ,qBAMkC,IAAjC9D,OAAOC,KAAKtH,GAAUwG,QAAgB,cAACC,EAAA,EAAD,CAASpH,QAAQ,WACvDgI,OAAOwC,QAAQ7J,GAAU8C,KAAI,mCAAEhD,EAAF,KAAaQ,EAAb,YAC5B,eAACsI,EAAA,EAAD,CAAU,UAAS9I,EAA2BuG,QAAS6E,EAAvD,UACE,cAACrC,GAAA,EAAD,UACE,cAACiB,GAAA,EAAD,CAAQ3L,GAAI,CAAEI,MAAOsF,EAAQvD,EAAQ2C,aAEtC3C,EAAQ0C,OAJwBlD,SAQvC,cAACsL,GAAA,EAAD,CAAQzC,QAASsC,EAAmB7C,KAAM2C,EAA1C,SACE,cAAChC,GAAD,CAAgBC,YAAaiC,SC3D9B,SAASI,KACd,OACE,cAACC,EAAA,EAAD,CAAQnN,GAAI,CAAEoN,SAAU,UAAxB,SACE,eAAC7D,EAAA,EAAD,WACE,cAACtI,EAAA,EAAD,CACEC,QAAQ,KACRmM,QAAM,EACNC,UAAU,MACVtN,GAAI,CAAEuN,SAAU,EAAGnG,QAAS,CAAEoG,GAAI,OAAQC,GAAI,UAJhD,uBAQA,eAACtG,EAAA,EAAD,CAAKnH,GAAI,CAAE0N,WAAY,OAAQC,YAAa,GAA5C,UACE,cAAChB,GAAD,CAAY3M,GAAI,CAAEoJ,QAAS,KAC3B,cAACS,GAAD,YCRH,SAAS+D,KACd,IAAQhM,EAASgF,qBAAWnD,GAApB7B,KAER,OACE,mCACGA,EACC,qCACE,cAACsL,GAAD,IACA,cAACvG,EAAD,IACA,cAAC4B,EAAD,OAGF,mCACE,eAACpB,EAAA,EAAD,CACEnH,GAAI,CACF6N,WAAY,SACZ1N,gBAAiB,UACjBiH,QAAS,OACT0G,cAAe,SACfrG,OAAQ,QACRsG,eAAgB,SAChBzG,QAAS,EACTsC,UAAW,UATf,UAYE,cAAC3I,EAAA,EAAD,CAAYC,QAAQ,KAAKlB,GAAI,CAAEI,MAAO,QAAtC,uBAGA,cAACa,EAAA,EAAD,CAAYjB,GAAI,CAAEI,MAAO,OAAQuJ,QAAS,GAA1C,+DAGA,cAAC7J,EAAD,CACEoI,QAASlF,EACTmF,UAAW,cAAC6F,EAAA,EAAD,IACXhO,GAAI,CAAE2J,QAAS,GACfzI,QAAQ,UAJV,wCC9BG+M,OARf,WACE,OACE,cAACtK,EAAD,UACE,cAACiK,GAAD,OCMSM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.8500e870.chunk.js","sourcesContent":["import { Button } from \"@mui/material\";\r\n\r\nexport function InvertedButton({ children, sx, ...props }) {\r\n  return (\r\n    <Button\r\n      sx={{\r\n        ...sx,\r\n        backgroundColor: \"#fff\",\r\n        color: \"#1976D2\",\r\n        \"&:hover\": {\r\n          backgroundColor: \"#fff\",\r\n          color: \"#1565C0\",\r\n        },\r\n      }}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n}\r\n","/**\r\n * Format number to be two+ digits string (using leading zeroes)\r\n * @param {Number} n must be non-negative\r\n */\r\nexport const formatDigits = (n) =>\r\n  n < 10 ? `0${Math.floor(n)}` : `${Math.floor(n)}`;\r\n\r\n/**\r\n * Format milliseconds to hours:minutes:seconds string\r\n * @param {Number} ms must be non-negative\r\n */\r\nexport const msToHMS = (ms) =>\r\n  `${formatDigits((ms / (1000 * 60 * 60)) % 24)}:${formatDigits(\r\n    (ms / (1000 * 60)) % 60\r\n  )}:${formatDigits((ms / 1000) % 60)}`;\r\n","import { Typography } from \"@mui/material\";\r\nimport { useStopwatch } from \"react-timer-hook\";\r\nimport { formatDigits as format } from \"../utils/format\";\r\n\r\nexport function ActiveTimer({ offsetTimestamp }) {\r\n  const { seconds, minutes, hours, days } = useStopwatch({\r\n    autoStart: true,\r\n    offsetTimestamp,\r\n  });\r\n\r\n  return (\r\n    <Typography variant=\"h4\">\r\n      {format(hours + days * 24)}:{format(minutes)}:{format(seconds)}\r\n    </Typography>\r\n  );\r\n}\r\n","export function AppReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE_TIMER\":\r\n      return {\r\n        ...state,\r\n        activeTimers: [\r\n          {\r\n            createdAt: action.payload.createdAt,\r\n            projectId: action.payload.projectId,\r\n          },\r\n          ...state.activeTimers,\r\n        ],\r\n      };\r\n    case \"SET_STATE\":\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        projects: action.payload.projects ?? {},\r\n        timers: action.payload.timers ?? [],\r\n      };\r\n    case \"STOP_TIMER\":\r\n      return {\r\n        ...state,\r\n        activeTimers: state.activeTimers.filter(\r\n          (timer) =>\r\n            timer.createdAt.toMillis() !== action.payload.createdAt.toMillis()\r\n        ),\r\n        timers: [action.payload, ...state.timers],\r\n      };\r\n    case \"SET_PROJECT\":\r\n      return {\r\n        ...state,\r\n        projects: {\r\n          ...state.projects,\r\n          [action.payload.id]: action.payload.project,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { GoogleAuthProvider, getAuth, signInWithPopup } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBohetEQXVTK6kEq8VS2yHqZJcqqCC7fj0\",\r\n  authDomain: \"produtime-fa9af.firebaseapp.com\",\r\n  projectId: \"produtime-fa9af\",\r\n  storageBucket: \"produtime-fa9af.appspot.com\",\r\n  messagingSenderId: \"545474059112\",\r\n  appId: \"1:545474059112:web:040ab7ea733a75652794dd\",\r\n  measurementId: \"G-45144WT77B\",\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\n\r\nexport async function signInWithGoogle() {\r\n  try {\r\n    const provider = new GoogleAuthProvider();\r\n    await signInWithPopup(auth, provider);\r\n  } catch (error) {}\r\n}\r\n\r\nexport function signOut() {\r\n  try {\r\n    auth.signOut();\r\n  } catch (error) {}\r\n}\r\n","import { createContext, useEffect, useReducer } from \"react\";\r\nimport {\r\n  Timestamp,\r\n  addDoc,\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  orderBy,\r\n  setDoc,\r\n  query,\r\n} from \"firebase/firestore\";\r\nimport { AppReducer } from \"./AppReducer\";\r\nimport { auth, db } from \"../firebase/config\";\r\n\r\nconst initialState = {\r\n  activeTimers: [],\r\n  user: auth.currentUser,\r\n  projects: {},\r\n  timers: [],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport function GlobalProvider({ children }) {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Update user in state when Firebase updates auth\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(async (user) => {\r\n      try {\r\n        // Clear state on sign-out\r\n        if (user === null) {\r\n          dispatch({\r\n            type: \"SET_STATE\",\r\n            payload: { user },\r\n          });\r\n          return;\r\n        }\r\n        // Read projects & timers from database on sign-in\r\n        const projectsSnapshot = await getDocs(\r\n          collection(db, \"users\", user.uid, \"projects\")\r\n        );\r\n        const timersSnapshot = await getDocs(\r\n          query(\r\n            collection(db, \"users\", user.uid, \"timers\"),\r\n            orderBy(\"createdAt\", \"desc\")\r\n          )\r\n        );\r\n        const projects = projectsSnapshot.docs.reduce((projects, doc) => {\r\n          return {\r\n            ...projects,\r\n            [doc.id]: doc.data(),\r\n          };\r\n        }, {});\r\n        const timers = timersSnapshot.docs.map((doc) => {\r\n          return {\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          };\r\n        });\r\n        dispatch({\r\n          type: \"SET_STATE\",\r\n          payload: {\r\n            user,\r\n            projects,\r\n            timers,\r\n          },\r\n        });\r\n      } catch (error) {}\r\n    });\r\n  }, []);\r\n\r\n  /** Add new project to database, load in state\r\n   * @param {{ name: String, colour: String, uid: String }} payload new project + uid of signed in user\r\n   */\r\n  const createProject = async ({ name, colour, uid }) => {\r\n    try {\r\n      const project = {\r\n        name,\r\n        colour,\r\n      };\r\n\r\n      const docRef = await addDoc(\r\n        collection(db, \"users\", uid, \"projects\"),\r\n        project\r\n      );\r\n\r\n      dispatch({\r\n        type: \"SET_PROJECT\",\r\n        payload: {\r\n          id: docRef.id,\r\n          project,\r\n        },\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  /** Update project in database and state\r\n   * @param {{ id: String, name: String, colour: String, uid: String }} payload updated project + uid of signed in user\r\n   */\r\n  const updateProject = async ({ id, name, colour, uid }) => {\r\n    try {\r\n      const project = {\r\n        name,\r\n        colour,\r\n      };\r\n\r\n      await setDoc(doc(db, \"users\", uid, \"projects\", id), project);\r\n\r\n      dispatch({\r\n        type: \"SET_PROJECT\",\r\n        payload: {\r\n          id,\r\n          project,\r\n        },\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  /** Create activeTimer in state\r\n   * @param {{ projectId: String }} payload projectId of project associated with timer\r\n   */\r\n  const createTimer = ({ projectId }) => {\r\n    const payload = {\r\n      createdAt: Timestamp.now(),\r\n      projectId,\r\n    };\r\n    dispatch({\r\n      type: \"CREATE_TIMER\",\r\n      payload,\r\n    });\r\n  };\r\n\r\n  /** Remove activeTimer from state and write to database\r\n   * @param {{ createdAt: Timestamp, projectId: String, uid: String }} payload activeTimer info + uid of signed in user\r\n   */\r\n  const stopTimer = async ({ createdAt, projectId, uid }) => {\r\n    try {\r\n      const timer = {\r\n        createdAt,\r\n        endedAt: Timestamp.now(),\r\n        projectId,\r\n      };\r\n      const docRef = await addDoc(\r\n        collection(db, \"users\", uid, \"timers\"),\r\n        timer\r\n      );\r\n\r\n      dispatch({\r\n        type: \"STOP_TIMER\",\r\n        payload: {\r\n          ...timer,\r\n          id: docRef.id,\r\n        },\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        ...state,\r\n        createProject,\r\n        updateProject,\r\n        createTimer,\r\n        stopTimer,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n","export const COLOURS = {\r\n  red: \"#ef9a9a\",\r\n  pink: \"#f48fb1\",\r\n  purple: \"#ce93d8\",\r\n  deepPurple: \"#b39ddb\",\r\n  indigo: \"#9fa8da\",\r\n  blue: \"#90caf9\",\r\n  lightBlue: \"#81d4fa\",\r\n  cyan: \"#80deea\",\r\n  teal: \"#80cbc4\",\r\n  green: \"#a5d6a7\",\r\n  lightGreen: \"#c5e1a5\",\r\n  lime: \"#e6ee9c\",\r\n  yellow: \"#fff59d\",\r\n  amber: \"#ffe082\",\r\n  orange: \"#ffcc80\",\r\n  deepOrange: \"#ffab91\",\r\n};\r\n","import { useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Stop } from \"@mui/icons-material\";\r\nimport { ActiveTimer } from \"./ActiveTimer\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { COLOURS } from \"../data/constants\";\r\n\r\nexport function TimeCards() {\r\n  const { activeTimers, projects, user, stopTimer } = useContext(GlobalContext);\r\n\r\n  function endTimer(event) {\r\n    stopTimer({\r\n      ...activeTimers.find(\r\n        (timer) =>\r\n          timer.createdAt.toMillis() === +event.currentTarget.dataset.created\r\n      ),\r\n      uid: user.uid,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flex: 1,\r\n          padding: 1,\r\n          overflow: \"auto\",\r\n          scrollbarWidth: \"thin\",\r\n          \"&::-webkit-scrollbar\": {\r\n            height: \"10px\",\r\n          },\r\n          \"&::-webkit-scrollbar-thumb\": {\r\n            borderRadius: \"10px\",\r\n            backgroundColor: \"#D3D3D3\",\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ display: \"flex\", minHeight: \"min-content\" }}>\r\n          {activeTimers.map((timer) => {\r\n            const project = projects[timer.projectId] || {};\r\n            const createdAtMS = timer.createdAt.toMillis();\r\n\r\n            return (\r\n              <Card\r\n                key={createdAtMS}\r\n                sx={{\r\n                  backgroundColor: COLOURS[project.colour],\r\n                  margin: 1,\r\n                  width: 275,\r\n                }}\r\n              >\r\n                <CardContent>\r\n                  <ActiveTimer offsetTimestamp={createdAtMS} />\r\n                  <Typography variant=\"subtitle1\" color=\"text.secondary\">\r\n                    {project.name}\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    data-created={createdAtMS}\r\n                    onClick={endTimer}\r\n                    startIcon={<Stop />}\r\n                  >\r\n                    Stop Timer\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            );\r\n          })}\r\n        </Box>\r\n      </Box>\r\n      {activeTimers.length > 0 && <Divider variant=\"middle\" />}\r\n    </>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActionArea,\r\n  Chip,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { COLOURS } from \"../data/constants\";\r\nimport { msToHMS } from \"../utils/format\";\r\n\r\nexport function Timers() {\r\n  const { projects, timers } = useContext(GlobalContext);\r\n\r\n  // Create an object to map timers to date strings\r\n  const datedTimers = timers.reduce((accumulator, timer) => {\r\n    const options = {\r\n      weekday: \"long\",\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n    };\r\n    const date = timer.createdAt\r\n      .toDate()\r\n      .toLocaleDateString(undefined, options);\r\n\r\n    if (accumulator[date] === undefined) {\r\n      return {\r\n        ...accumulator,\r\n        [date]: [timer],\r\n      };\r\n    }\r\n\r\n    return {\r\n      ...accumulator,\r\n      [date]: [timer, ...accumulator[date]],\r\n    };\r\n  }, {});\r\n\r\n  return (\r\n    <>\r\n      {timers.length !== 0 ? (\r\n        Object.keys(datedTimers).map((date) => (\r\n          <Box key={date}>\r\n            <Typography sx={{ marginX: 3 }} variant=\"overline\">\r\n              {date}\r\n            </Typography>\r\n            {datedTimers[date].map((timer) => (\r\n              <Card elevation={0} key={timer.id}>\r\n                <CardActionArea>\r\n                  <Toolbar>\r\n                    <Chip\r\n                      label={msToHMS(\r\n                        timer.endedAt.toMillis() - timer.createdAt.toMillis()\r\n                      )}\r\n                      sx={{\r\n                        backgroundColor:\r\n                          COLOURS[projects[timer.projectId].colour],\r\n                      }}\r\n                    />\r\n                    <Typography sx={{ marginX: 1 }}>\r\n                      {projects[timer.projectId].name}\r\n                    </Typography>\r\n                  </Toolbar>\r\n                </CardActionArea>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n        ))\r\n      ) : (\r\n        <Box sx={{ marginY: 2, padding: 2, textAlign: \"center\" }}>\r\n          <Typography variant=\"h4\">No timers yet!</Typography>\r\n          <Typography sx={{ marginY: 1 }}>\r\n            Create a project and start a timer with the button above\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  IconButton,\r\n  ListItemIcon,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { Logout } from \"@mui/icons-material\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { signOut } from \"../firebase/config\";\r\n\r\nexport function AccountButton() {\r\n  const { user } = useContext(GlobalContext);\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={handleClick}>\r\n        <Avatar src={user.photoURL} />\r\n      </IconButton>\r\n      <Menu anchorEl={anchorEl} open={open} onClose={handleClose}>\r\n        <MenuItem onClick={signOut}>\r\n          <ListItemIcon>\r\n            <Logout />\r\n          </ListItemIcon>\r\n          Sign Out\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { Add, Circle } from \"@mui/icons-material\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { COLOURS } from \"../data/constants\";\r\n\r\nexport function ProjectsDialog({ handleClose }) {\r\n  const {\r\n    projects,\r\n    user: { uid },\r\n    createProject,\r\n    updateProject,\r\n  } = useContext(GlobalContext);\r\n  /**\r\n   * PROJECT_LIST: Display list of projects\r\n   * NEW_PROJECT: Provide dialog form to create new project\r\n   * [PROJECT_ID]: Provide dialog form to edit existing project w/ ID\r\n   */\r\n  const [dialogState, setDialogState] = useState(\"PROJECT_LIST\");\r\n  const [formInput, setFormInput] = useState({});\r\n\r\n  const formSubmit = () => {\r\n    if (projects[dialogState]) {\r\n      updateProject({\r\n        id: dialogState,\r\n        name: formInput.name ?? projects[dialogState].name,\r\n        colour: formInput.colour ?? projects[dialogState].colour,\r\n        uid,\r\n      });\r\n    } else {\r\n      if (formInput.name === undefined || formInput.colour === undefined) {\r\n        return;\r\n      }\r\n      createProject({\r\n        name: formInput.name,\r\n        colour: formInput.colour,\r\n        uid,\r\n      });\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {dialogState === \"PROJECT_LIST\" ? (\r\n        <>\r\n          <DialogTitle>Manage Projects</DialogTitle>\r\n          <List sx={{ pt: 0 }}>\r\n            <ListItem disableGutters>\r\n              <ListItemButton onClick={() => setDialogState(\"NEW_PROJECT\")}>\r\n                <ListItemIcon>\r\n                  <Add />\r\n                </ListItemIcon>\r\n                <ListItemText>New Project</ListItemText>\r\n              </ListItemButton>\r\n            </ListItem>\r\n            {Object.entries(projects).map(([projectId, project]) => (\r\n              <ListItem disableGutters key={projectId}>\r\n                <ListItemButton onClick={() => setDialogState(projectId)}>\r\n                  <ListItemIcon>\r\n                    <Circle sx={{ color: COLOURS[project.colour] }} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>{project.name}</ListItemText>\r\n                </ListItemButton>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <DialogTitle>\r\n            {projects[dialogState] ? \"Edit Project\" : \"Create New Project\"}\r\n          </DialogTitle>\r\n          <DialogContent sx={{ display: \"flex\", gap: 1 }}>\r\n            <Select\r\n              defaultValue={projects[dialogState]?.colour ?? \"\"}\r\n              displayEmpty\r\n              onChange={(event) =>\r\n                setFormInput({ ...formInput, colour: event.target.value })\r\n              }\r\n              renderValue={(value) => {\r\n                return (\r\n                  <Box sx={{ display: \"flex\", gap: 1 }}>\r\n                    <Circle sx={{ color: COLOURS[value] ?? \"lightgray\" }} />\r\n                  </Box>\r\n                );\r\n              }}\r\n              required\r\n              variant=\"standard\"\r\n            >\r\n              {Object.entries(COLOURS).map(([colourKey, hex]) => (\r\n                <MenuItem key={colourKey} value={colourKey}>\r\n                  <Circle sx={{ color: hex }} />\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            <TextField\r\n              defaultValue={projects[dialogState]?.name ?? \"\"}\r\n              onChange={(event) =>\r\n                setFormInput({ ...formInput, name: event.target.value })\r\n              }\r\n              placeholder=\"My Project Name\"\r\n              required\r\n              sx={{\r\n                transform: \"translateY(1px)\",\r\n              }}\r\n              variant=\"standard\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose}>Cancel</Button>\r\n            <Button onClick={formSubmit}>Confirm</Button>\r\n          </DialogActions>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport { Dialog, Divider, ListItemIcon, Menu, MenuItem } from \"@mui/material\";\r\nimport { Add, Circle, Settings } from \"@mui/icons-material\";\r\nimport { InvertedButton } from \"./InvertedButton\";\r\nimport { ProjectsDialog } from \"./ProjectsDialog\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { COLOURS } from \"../data/constants\";\r\n\r\nexport function TimeButton(props) {\r\n  const { createTimer, projects } = useContext(GlobalContext);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDialogOpen = () => {\r\n    handleClose();\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  function startTimer(event) {\r\n    handleClose();\r\n    createTimer({ projectId: event.currentTarget.dataset.id });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <InvertedButton\r\n        onClick={handleClick}\r\n        startIcon={<Add />}\r\n        variant=\"contained\"\r\n        {...props}\r\n      >\r\n        New Timer\r\n      </InvertedButton>\r\n      <Menu anchorEl={anchorEl} open={open} onClose={handleClose}>\r\n        <MenuItem onClick={handleDialogOpen}>\r\n          <ListItemIcon>\r\n            <Settings />\r\n          </ListItemIcon>\r\n          Manage Projects\r\n        </MenuItem>\r\n        {Object.keys(projects).length !== 0 && <Divider variant=\"middle\" />}\r\n        {Object.entries(projects).map(([projectId, project]) => (\r\n          <MenuItem data-id={projectId} key={projectId} onClick={startTimer}>\r\n            <ListItemIcon>\r\n              <Circle sx={{ color: COLOURS[project.colour] }} />\r\n            </ListItemIcon>\r\n            {project.name}\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n      <Dialog onClose={handleDialogClose} open={dialogOpen}>\r\n        <ProjectsDialog handleClose={handleDialogClose} />\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import { AppBar, Box, Toolbar, Typography } from \"@mui/material\";\r\nimport { AccountButton } from \"./AccountButton\";\r\nimport { TimeButton } from \"./TimeButton\";\r\n\r\nexport function TopAppBar() {\r\n  return (\r\n    <AppBar sx={{ position: \"static\" }}>\r\n      <Toolbar>\r\n        <Typography\r\n          variant=\"h6\"\r\n          noWrap\r\n          component=\"div\"\r\n          sx={{ flexGrow: 1, display: { xs: \"none\", sm: \"block\" } }}\r\n        >\r\n          Produtime\r\n        </Typography>\r\n        <Box sx={{ marginLeft: \"auto\", marginRight: 0 }}>\r\n          <TimeButton sx={{ marginX: 1 }} />\r\n          <AccountButton />\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport { Google } from \"@mui/icons-material\";\r\nimport { InvertedButton } from \"./InvertedButton\";\r\nimport { TimeCards } from \"./TimeCards\";\r\nimport { Timers } from \"./Timers\";\r\nimport { TopAppBar } from \"./TopAppBar\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { signInWithGoogle } from \"../firebase/config\";\r\n\r\nexport function SignIn() {\r\n  const { user } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <>\r\n      {user ? (\r\n        <>\r\n          <TopAppBar />\r\n          <TimeCards />\r\n          <Timers />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Box\r\n            sx={{\r\n              alignItems: \"center\",\r\n              backgroundColor: \"#1976D2\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              height: \"100vh\",\r\n              justifyContent: \"center\",\r\n              padding: 2,\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h3\" sx={{ color: \"#fff\" }}>\r\n              Produtime\r\n            </Typography>\r\n            <Typography sx={{ color: \"#fff\", marginY: 1 }}>\r\n              Keep track of the time you spend being productive\r\n            </Typography>\r\n            <InvertedButton\r\n              onClick={signInWithGoogle}\r\n              startIcon={<Google />}\r\n              sx={{ marginY: 1 }}\r\n              variant=\"outline\"\r\n            >\r\n              Sign In with Google\r\n            </InvertedButton>\r\n          </Box>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { SignIn } from \"./components/SignIn\";\nimport { GlobalProvider } from \"./context/GlobalState\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <SignIn />\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}